// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/expense.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "gitlab.ozon.dev/myasnikov.alexander.s/telegram-bot/internal/entity"
)

// MockICurrencyStorage is a mock of ICurrencyStorage interface.
type MockICurrencyStorage struct {
	ctrl     *gomock.Controller
	recorder *MockICurrencyStorageMockRecorder
}

// MockICurrencyStorageMockRecorder is the mock recorder for MockICurrencyStorage.
type MockICurrencyStorageMockRecorder struct {
	mock *MockICurrencyStorage
}

// NewMockICurrencyStorage creates a new mock instance.
func NewMockICurrencyStorage(ctrl *gomock.Controller) *MockICurrencyStorage {
	mock := &MockICurrencyStorage{ctrl: ctrl}
	mock.recorder = &MockICurrencyStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICurrencyStorage) EXPECT() *MockICurrencyStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockICurrencyStorage) Get(arg0 string) (entity.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(entity.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICurrencyStorageMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICurrencyStorage)(nil).Get), arg0)
}

// GetAll mocks base method.
func (m *MockICurrencyStorage) GetAll() ([]entity.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]entity.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICurrencyStorageMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICurrencyStorage)(nil).GetAll))
}

// Update mocks base method.
func (m *MockICurrencyStorage) Update(arg0 entity.Rate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockICurrencyStorageMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICurrencyStorage)(nil).Update), arg0)
}

// MockIUserStorage is a mock of IUserStorage interface.
type MockIUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIUserStorageMockRecorder
}

// MockIUserStorageMockRecorder is the mock recorder for MockIUserStorage.
type MockIUserStorageMockRecorder struct {
	mock *MockIUserStorage
}

// NewMockIUserStorage creates a new mock instance.
func NewMockIUserStorage(ctrl *gomock.Controller) *MockIUserStorage {
	mock := &MockIUserStorage{ctrl: ctrl}
	mock.recorder = &MockIUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserStorage) EXPECT() *MockIUserStorageMockRecorder {
	return m.recorder
}

// GetDefaultCurrency mocks base method.
func (m *MockIUserStorage) GetDefaultCurrency(arg0 entity.UserID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultCurrency", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultCurrency indicates an expected call of GetDefaultCurrency.
func (mr *MockIUserStorageMockRecorder) GetDefaultCurrency(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultCurrency", reflect.TypeOf((*MockIUserStorage)(nil).GetDefaultCurrency), arg0)
}

// UpdateDefaultCurrency mocks base method.
func (m *MockIUserStorage) UpdateDefaultCurrency(arg0 entity.UserID, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDefaultCurrency", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDefaultCurrency indicates an expected call of UpdateDefaultCurrency.
func (mr *MockIUserStorageMockRecorder) UpdateDefaultCurrency(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDefaultCurrency", reflect.TypeOf((*MockIUserStorage)(nil).UpdateDefaultCurrency), arg0, arg1)
}

// MockIExpenseStorage is a mock of IExpenseStorage interface.
type MockIExpenseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIExpenseStorageMockRecorder
}

// MockIExpenseStorageMockRecorder is the mock recorder for MockIExpenseStorage.
type MockIExpenseStorageMockRecorder struct {
	mock *MockIExpenseStorage
}

// NewMockIExpenseStorage creates a new mock instance.
func NewMockIExpenseStorage(ctrl *gomock.Controller) *MockIExpenseStorage {
	mock := &MockIExpenseStorage{ctrl: ctrl}
	mock.recorder = &MockIExpenseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExpenseStorage) EXPECT() *MockIExpenseStorageMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIExpenseStorage) Create(arg0 entity.UserID, arg1 entity.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExpenseStorageMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExpenseStorage)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockIExpenseStorage) Get(arg0 entity.UserID, arg1 entity.Date, arg2 int) ([]entity.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entity.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIExpenseStorageMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIExpenseStorage)(nil).Get), arg0, arg1, arg2)
}

// MockIRatesUpdaterService is a mock of IRatesUpdaterService interface.
type MockIRatesUpdaterService struct {
	ctrl     *gomock.Controller
	recorder *MockIRatesUpdaterServiceMockRecorder
}

// MockIRatesUpdaterServiceMockRecorder is the mock recorder for MockIRatesUpdaterService.
type MockIRatesUpdaterServiceMockRecorder struct {
	mock *MockIRatesUpdaterService
}

// NewMockIRatesUpdaterService creates a new mock instance.
func NewMockIRatesUpdaterService(ctrl *gomock.Controller) *MockIRatesUpdaterService {
	mock := &MockIRatesUpdaterService{ctrl: ctrl}
	mock.recorder = &MockIRatesUpdaterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRatesUpdaterService) EXPECT() *MockIRatesUpdaterServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIRatesUpdaterService) Get(ctx context.Context, base string, codes []string) ([]entity.Rate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, base, codes)
	ret0, _ := ret[0].([]entity.Rate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIRatesUpdaterServiceMockRecorder) Get(ctx, base, codes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRatesUpdaterService)(nil).Get), ctx, base, codes)
}

// MockIConfig is a mock of IConfig interface.
type MockIConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigMockRecorder
}

// MockIConfigMockRecorder is the mock recorder for MockIConfig.
type MockIConfigMockRecorder struct {
	mock *MockIConfig
}

// NewMockIConfig creates a new mock instance.
func NewMockIConfig(ctrl *gomock.Controller) *MockIConfig {
	mock := &MockIConfig{ctrl: ctrl}
	mock.recorder = &MockIConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfig) EXPECT() *MockIConfigMockRecorder {
	return m.recorder
}

// GetBaseCurrencyCode mocks base method.
func (m *MockIConfig) GetBaseCurrencyCode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseCurrencyCode")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseCurrencyCode indicates an expected call of GetBaseCurrencyCode.
func (mr *MockIConfigMockRecorder) GetBaseCurrencyCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseCurrencyCode", reflect.TypeOf((*MockIConfig)(nil).GetBaseCurrencyCode))
}

// GetCurrencyCodes mocks base method.
func (m *MockIConfig) GetCurrencyCodes() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrencyCodes")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetCurrencyCodes indicates an expected call of GetCurrencyCodes.
func (mr *MockIConfigMockRecorder) GetCurrencyCodes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrencyCodes", reflect.TypeOf((*MockIConfig)(nil).GetCurrencyCodes))
}

// GetFrequencyRateUpdateSec mocks base method.
func (m *MockIConfig) GetFrequencyRateUpdateSec() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrequencyRateUpdateSec")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFrequencyRateUpdateSec indicates an expected call of GetFrequencyRateUpdateSec.
func (mr *MockIConfigMockRecorder) GetFrequencyRateUpdateSec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrequencyRateUpdateSec", reflect.TypeOf((*MockIConfig)(nil).GetFrequencyRateUpdateSec))
}
