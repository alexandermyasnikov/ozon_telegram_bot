// Code generated by MockGen. DO NOT EDIT.
// Source: internal/textrouter/texthandler/get_report.go

// Package mock_texthandler is a generated GoMock package.
package mock_texthandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "gitlab.ozon.dev/myasnikov.alexander.s/telegram-bot/internal/usecase"
)

// MockExpenseUsecaseGR is a mock of ExpenseUsecaseGR interface.
type MockExpenseUsecaseGR struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseUsecaseGRMockRecorder
}

// MockExpenseUsecaseGRMockRecorder is the mock recorder for MockExpenseUsecaseGR.
type MockExpenseUsecaseGRMockRecorder struct {
	mock *MockExpenseUsecaseGR
}

// NewMockExpenseUsecaseGR creates a new mock instance.
func NewMockExpenseUsecaseGR(ctrl *gomock.Controller) *MockExpenseUsecaseGR {
	mock := &MockExpenseUsecaseGR{ctrl: ctrl}
	mock.recorder = &MockExpenseUsecaseGRMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseUsecaseGR) EXPECT() *MockExpenseUsecaseGRMockRecorder {
	return m.recorder
}

// GetReport mocks base method.
func (m *MockExpenseUsecaseGR) GetReport(ctx context.Context, req usecase.GetReportReqDTO) (usecase.GetReportRespDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport", ctx, req)
	ret0, _ := ret[0].(usecase.GetReportRespDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReport indicates an expected call of GetReport.
func (mr *MockExpenseUsecaseGRMockRecorder) GetReport(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockExpenseUsecaseGR)(nil).GetReport), ctx, req)
}
