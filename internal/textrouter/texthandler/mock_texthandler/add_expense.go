// Code generated by MockGen. DO NOT EDIT.
// Source: internal/textrouter/texthandler/add_expense.go

// Package mock_texthandler is a generated GoMock package.
package mock_texthandler

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	usecase "gitlab.ozon.dev/myasnikov.alexander.s/telegram-bot/internal/usecase"
)

// MockExpenseUsecaseAE is a mock of ExpenseUsecaseAE interface.
type MockExpenseUsecaseAE struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseUsecaseAEMockRecorder
}

// MockExpenseUsecaseAEMockRecorder is the mock recorder for MockExpenseUsecaseAE.
type MockExpenseUsecaseAEMockRecorder struct {
	mock *MockExpenseUsecaseAE
}

// NewMockExpenseUsecaseAE creates a new mock instance.
func NewMockExpenseUsecaseAE(ctrl *gomock.Controller) *MockExpenseUsecaseAE {
	mock := &MockExpenseUsecaseAE{ctrl: ctrl}
	mock.recorder = &MockExpenseUsecaseAEMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseUsecaseAE) EXPECT() *MockExpenseUsecaseAEMockRecorder {
	return m.recorder
}

// AddExpense mocks base method.
func (m *MockExpenseUsecaseAE) AddExpense(ctx context.Context, req usecase.AddExpenseReqDTO) (usecase.AddExpenseRespDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExpense", ctx, req)
	ret0, _ := ret[0].(usecase.AddExpenseRespDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddExpense indicates an expected call of AddExpense.
func (mr *MockExpenseUsecaseAEMockRecorder) AddExpense(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExpense", reflect.TypeOf((*MockExpenseUsecaseAE)(nil).AddExpense), ctx, req)
}
